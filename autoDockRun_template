#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([configFile], c,[inputFileName])
# ARG_OPTIONAL_SINGLE([outputFile], o,[outputFileName])
# ARG_OPTIONAL_SINGLE([colig], l,[cofactor/ligand file which should be added to rigid receptor .pdbqt file])
# ARG_OPTIONAL_BOOLEAN([startVina], s, [starts docking run with AutodockVina])
# ARG_HELP([The general script's help msg])

# ARGBASH_GO

# [ <-- needed because of Argbash
WD=$(pwd)
TMP="/tmp"
file="$_arg_configfile"
vina="$_arg_startvina"
colig="$_arg_colig"
### Functions

start () {
version="autoDockVina_v1.1"
if [ -z "$file" ]; then
  echo ""
  echo "$version"
  echo ""
  echo "No Input... -> `basename $0` -h for help"
  echo ""
  echo "This program converts the vina input file generated with the pymol AutoDock plugin, to run it on the server."
  echo ""
  echo "Files needed for docking: .vina_config.txt; receptor.rigid.pdbqt; ligand.pdbqt; (optional: receptor.flexible.pdbqt)"
  echo ""
  echo "Can optionally add a ligand or cofactor .pdbqt file (prepared by autotools) to rigid receptor file, to dock a ligand in presence of the cofactor or other ligand"
  exit 0
fi
}
addColig () {
	while IFS= read -r line; do echo "$line" | grep "HETATM" >> $TMP/colig.pdbqt ; done < $colig
	cat $receptor $TMP/colig.pdbqt > colig.$receptor
}

getData () {
receptor=$(cat $file | grep -m 1 "receptor =" | rev | cut -f 1 -d "/" | rev)
flex=$(cat $file | grep -m 1 "flex =" | rev | cut -f 1 -d "/" | rev)
ligand=$(cat $file | grep -m 1 "ligand =" | rev | cut -f 1 -d "/" | rev)
center_x=$(cat $file | grep -m 1 center_x)
center_y=$(cat $file | grep -m 1 center_y)
center_z=$(cat $file | grep -m 1 center_z)
size_x=$(cat $file | grep -m 1 size_x)
size_y=$(cat $file | grep -m 1 size_y)
size_z=$(cat $file | grep -m 1 size_z)
out=$(cat $file | grep -m 1 "out =" | rev | cut -f 1 -d "/" | rev)
log=$(cat $file | grep -m 1 "log =" | rev | cut -f 1 -d "/" | rev)
numModes=$(cat $file | grep -m 1 num_modes)
}

buildNew () {
if [ -z "$receptor" ]; then
        :
    elif [ ! -z $colig ]; then
    	printf "receptor = $WD/colig.$receptor\n"	
    else
        printf "receptor = $WD/$receptor\n"
fi
if [ -z "$flex" ]; then
        :
    else
        printf "flex = $WD/$flex\n"
fi
if [ -z "$ligand" ]; then
        :
    else
        printf "ligand = $WD/$ligand\n"
fi
if [ -z "$center_x" ]; then
        :
    else
        printf "$center_x\n"
fi
if [ -z "$center_y" ]; then
        :
    else
        printf "$center_y\n"
fi
if [ -z "$center_z" ]; then
        :
    else
        printf "$center_z\n"
fi
if [ -z "$size_x" ]; then
        :
    else
        printf "$size_x\n"
fi
if [ -z "$size_y" ]; then
        :
    else
        printf "$size_y\n"
fi
if [ -z "$size_z" ]; then
        :
    else
        printf "$size_z\n"
fi
if [ -z "$out" ]; then
        :
    else
        printf "out = $WD/$out\n"
fi
if [ -z "$log" ]; then
        :
    else
        printf "log = $WD/$log\n"
fi
if [ -z "$numModes" ]; then
        :
    else
        printf "$numModes\n"
fi
}

vinaRun () {
    vina --config $TMP/VinaConfigOutputFile
}

cleanUp () {
	rm $TMP/VinaConfigOutputFile $TMP/colig.pdbqt >/dev/null 2>/dev/null
}
	
### script functions
buildNewRun () {
	if [ -z "$_arg_outputfile" ]; then
        	buildNew > $TMP/VinaConfigOutputFile
        	buildNew
    	else
        	buildNew > $TMP/VinaConfigOutputFile
        	buildNew > $_arg_outputfile
	fi
}

coligRun () {
	if [ -z $colig ]; then
            :
        else
            addColig
	fi 
}

vinaRunRun () {
	if [ $vina = "off" ]; then
        	printf "\n"
        	printf "startVina (-s) option not given -> docking not started\n"
        	printf "\n"
    	else
        	printf "\n"
        	vinaRun
        	wait
	fi
}

#RUN

start
getData
buildNewRun
coligRun
vinaRunRun
cleanUp
# ] <-- needed because of Argbash

